#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
using namespace std;

class Playfair {
	char mTable[25];
	string mPair;
	string mKey;
public:
	Playfair(string mKey, string mPair);
	void makeTable();
	void showTable();
	string makeEncryption(string mEncryption);
};

Playfair::Playfair(string mKey, string mPair) {
	this->mKey = mKey;
	this->mPair = mPair;
}

void Playfair::makeTable() {
	char key[25] = { 0, };
	char key2[25] = { 0, };
	char A = 'a';
	int count = 0, ck = 0;

	strcpy(key, mKey.c_str());
	int len = mKey.length();


	cout << "키값은 : " << key << endl;
	// key값의 중복값을 제거한 후 key2에 저장
	for (int i = 0; i < len; i++) {
		ck = 0;
		for (int j = 0; j < len; j++) {
			if (key[i] == key2[j]) {
				ck = 1;
			}
			else if (key[i] == mPair[2]) {
				ck = 1;
			}
		}
		if (ck == 0) {
			key2[count++] = key[i];
		}
	}
	cout << "중복 제거된 키값 : " << key2 << "\n\n";

	strcpy(mTable, key2);//mTable에 중복값 제거된 key2값 저장
	len = strlen(key2);
	//key2 배열 안에 q,z값을 같은 값으로 인식하게 함
	for (int i = 0; i < len; i++) {
		if (key2[i] == mPair[0]) {
			key2[len] = mPair[2];
		}
		else if (key2[i] == mPair[2]) {
			key2[len] = mPair[0];
		}
	}
	//mTable 만들기
	for (int i = len; i < 25; i++) {
		for (int j = 0; j < len + 1; j++) {
			if (A == key2[j]) {
				A++;
				j = -1;
			}
			else if (A == mPair[2]) {
				A++;
			}
			else {
				mTable[i] = A;
			}
		}
		if (mTable[i] >= 'a' && mTable[i] <= 'z') {
			A++;
		}
	}
}

void Playfair::showTable() {
	// mTable에 있는 값들을 5 X 5 로 화면에 출력하시오.


	for (int i = 0; i < 25; i++) {
		if (mTable[i] == mPair[0]) {
			cout << mPair << " ";
		}
		else {
			cout << mTable[i] << "   ";
		}
		if (i % 5 == 4) {
			cout << endl;
		}
	}
	cout << endl;
}

string Playfair::makeEncryption(string mEncryption) {
	char txt[100] = { 0, };
	char txt2[100] = { 0, };
	int cnt = 0;
	//공백없애기
	mEncryption.erase(remove(mEncryption.begin(), mEncryption.end(), ' '), mEncryption.end());
	cout << "\n공백제거한후 : " << mEncryption << "\n\n";
	//연속되는 글자 구분하기 + 연속되는 글자 사이에 X넣기
	strcpy(txt2, mEncryption.c_str());//char배열로 넣어두기
	cnt = 0;
	int len = strlen(txt2);
	for (int i = 0; i < len + 1; i++) {
		if (txt2[i] == txt2[i + 1]) {//연속되는 글자일때
			txt[cnt++] = txt2[i];
			txt[cnt++] = 'x';
		}
		else {
			txt[cnt++] = txt2[i];
			txt[cnt++] = txt2[i + 1];
			i++;
		}
	}
	len = strlen(txt);
	if (len % 2 == 1) {//글자가 홀수일 경우
		txt[len] = 'x';
	}
	cout << "X붙이고 자른 후 : ";
	for (int i = 0; txt[i] != 0; i++) {
		cout << txt[i];
		if (i % 2 == 1) {
			cout << " ";
		}
	}
	for (int i = 0; i < strlen(txt);i++) {
		if (txt[i] == mPair[2]) {
			txt[i] = mPair[0];
		}
	}
	cout << "\n";

	//암호화 시작
	char enc[100] = { 0, };
	cnt = 0;
	int cnt2 = 0;
	int n[100] = { 0, };

	for (int i = 0; i < strlen(txt) + 1; i++) {
		for (int j = 0; j < strlen(mTable); j++) {
			if (txt[i] == mTable[j]) {
				n[cnt++] = j;
				cout << j << " ";
			}
		}
	}
	cout << "\n";
	for (int i = 0; i < cnt; i = i + 2) {
		if (n[i] / 5 == n[i + 1] / 5) {//같은 행일 경우 오른쪽으로 한칸 밀고 맨 끝일경우 맨 왼쪽으로
			if ((n[i] + 1) / 5 > n[i] / 5) {
				n[i] = n[i] - 4;
			}
			else {
				n[i] = n[i] + 1;
			}
			if ((n[i + 1] + 1) / 5 > n[i + 1] / 5) {
				n[i + 1] = n[i + 1] - 4;
			}
			else {
				n[i + 1] = n[i + 1] + 1;
			}
		}
		else if (n[i] % 5 == n[i + 1] % 5 && n[i] != n[i + 1]) {//같은 열일 경우 아래쪽으로 한칸 밀고 맨 끝일경우 맨 위쪽으로
			if (n[i] + 5 > 24) {
				n[i] = n[i] - 20;
			}
			else {
				n[i] = n[i] + 5;
			}
			if (n[i + 1] + 5 > 24) {
				n[i + 1] = n[i + 1] - 20;
			}
			else {
				n[i + 1] = n[i + 1] + 5;
			}
		}
		else if (n[i] % 5 != n[i + 1] % 5 && n[i] / 5 != n[i + 1] / 5) {
			if (n[i] % 5 > n[i + 1] % 5) {
				int cnt2 = n[i] % 5 - n[i + 1] % 5;
				n[i] = n[i] - cnt2;
				n[i + 1] = n[i + 1] + cnt2;
			}
			else {
				int cnt3 = n[i + 1] % 5 - n[i] % 5;
				n[i] = n[i] + cnt3;
				n[i + 1] = n[i + 1] - cnt3;
			}
		}
	}

	for (int i = 0; i < cnt; i++) {
		cout << n[i] << " ";
	}

	for (int i = 0; i < cnt; i++) {
		enc[i] = mTable[n[i]];
	}
	cout << "\n\n암호화된 문장은 : " << enc << "\n";
	return mEncryption;
}


int main() {
	Playfair pfair("assassinator", "a/s");
	pfair.makeTable();
	pfair.showTable();
	string mEncryption;
	cout << "암호화할 문장은 : ";
	getline(cin, mEncryption);
	pfair.makeEncryption(mEncryption);
}
